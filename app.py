# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NKEIB12RfYQ8PEZ5G6dWb_yH9Hb2X5CI
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
import pickle

# Load the trained model and label encoders
with open('rf_model.pkl', 'rb') as model_file:
    rf_model = pickle.load(model_file)

# Function to preprocess the input data
def preprocess_input(input_data):
    # Assuming the same preprocessing steps used in training
    label_encoders = {  # Add the appropriate label encoders used in your training
        'Day_of_week': LabelEncoder(),
        'Age_band_of_driver': LabelEncoder(),
        'Sex_of_driver': LabelEncoder(),
        'Educational_level': LabelEncoder(),
        'Vehicle_driver_relation': LabelEncoder(),
        'Driving_experience': LabelEncoder(),
        'Type_of_vehicle': LabelEncoder(),
        'Owner_of_vehicle': LabelEncoder(),
        'Service_year_of_vehicle': LabelEncoder(),
        'Defect_of_vehicle': LabelEncoder(),
        'Area_accident_occured': LabelEncoder(),
        'Lanes_or_Medians': LabelEncoder(),
        'Road_allignment': LabelEncoder(),
        'Types_of_Junction': LabelEncoder(),
        'Road_surface_type': LabelEncoder(),
        'Road_surface_conditions': LabelEncoder(),
        'Light_conditions': LabelEncoder(),
        'Weather_conditions': LabelEncoder(),
        'Pedestrian_movement': LabelEncoder(),
    }

    # Transform categorical variables into numeric using Label Encoding
    for column in input_data.columns:
        if input_data[column].dtype == 'object':
            input_data[column] = label_encoders[column].fit_transform(input_data[column])

    return input_data

# Streamlit app layout
st.title('Accident Severity Prediction')
st.write('Enter the details of the accident:')

# Input fields
time = st.text_input('Time (in 24-hour format, e.g., 17.03)')
day_of_week = st.selectbox('Day of the week', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
age_band_of_driver = st.selectbox('Age band of driver', ['18-30', '31-50', 'Above 50'])
sex_of_driver = st.selectbox('Sex of driver', ['Male', 'Female'])
educational_level = st.selectbox('Educational level', ['Above high school', 'High school', 'Junior high school'])
vehicle_driver_relation = st.selectbox('Vehicle driver relation', ['Employee', 'Owner', 'Other'])
driving_experience = st.selectbox('Driving experience', ['1-2yr', '2-5yr', '5-10yr', 'Above 10yr'])
type_of_vehicle = st.selectbox('Type of vehicle', ['Automobile', 'Lorry (41-100Q)', 'Public (> 45 seats)', 'Other'])
owner_of_vehicle = st.selectbox('Owner of vehicle', ['Owner', 'Governmental', 'Other'])
service_year_of_vehicle = st.selectbox('Service year of vehicle', ['Above 10yr', '5-10yrs', '1-2yrs', 'Unknown'])

# Create a DataFrame for input data
input_data = pd.DataFrame({
    'Time': [time],
    'Day_of_week': [day_of_week],
    'Age_band_of_driver': [age_band_of_driver],
    'Sex_of_driver': [sex_of_driver],
    'Educational_level': [educational_level],
    'Vehicle_driver_relation': [vehicle_driver_relation],
    'Driving_experience': [driving_experience],
    'Type_of_vehicle': [type_of_vehicle],
    'Owner_of_vehicle': [owner_of_vehicle],
    'Service_year_of_vehicle': [service_year_of_vehicle]
})

# Process input data
input_data_processed = preprocess_input(input_data)

# Button to make prediction
if st.button('Predict'):
    prediction = rf_model.predict(input_data_processed)
    st.write('Predicted Accident Severity:', prediction[0])